#include <FastLED.h>
#define DATA_PIN 6
#define DATA_PIN_STRING 5
#define NUM_LEDS 88
#define STRING_LEDS 200
#define LED_STRIPS 8
#define NUM_LED_PER_STRIP 11

CRGB leds[NUM_LEDS];
CRGB led_string[STRING_LEDS];

// Use this for converting images to arrays:
// https://www.digole.com/tools/PicturetoC_Hex_converter.php
// Make sure image is 8x11 and '256 Color RRRGGGBB' option selected
// all even y lines are reversed.


unsigned char smile[] = {
  0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc
  , 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc
  , 0xfc, 0xfc, 0x00, 0xfc, 0xfc, 0x00, 0xfc, 0xfc
  , 0xfc, 0xfc, 0x00, 0xfc, 0xfc, 0x00, 0xfc, 0xfc
  , 0xfc, 0xfc, 0x00, 0xfc, 0xfc, 0x00, 0xfc, 0xfc
  , 0xfc, 0xfc, 0x00, 0xfc, 0xfc, 0x00, 0xfc, 0xfc
  , 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc
  , 0xfc, 0x00, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0xfc
  , 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc
  , 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc
  , 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc
};

unsigned char op_logo[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
  , 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff
  , 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff
  , 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0x2b, 0x2b, 0x2b, 0x2b, 0xff
  , 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x2b, 0xff, 0xff, 0x2b, 0xff
  , 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x2b, 0x2b, 0x2b, 0xff
  , 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0xff, 0xff, 0xff, 0xff
  , 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff

};

unsigned char smoole[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00
  , 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00
  , 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x00
  , 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned char color[] = {
  0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0x00, 0x00, 0x00, 0x00
  , 0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0x00, 0x00, 0x00, 0x00
  , 0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0x00, 0x00, 0x00, 0x00
  , 0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0x00, 0x00, 0x00, 0x00
  , 0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0xff, 0xff, 0xff, 0xff
  , 0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0xff, 0xff, 0xff, 0xff
  , 0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0xff, 0xff, 0xff, 0xff
  , 0xe0, 0xec, 0xfc, 0x35, 0x17, 0x2b, 0xaa, 0xff, 0xff, 0xff, 0xff

};


void bit_to_rgb(unsigned char c, int &r, int &g, int &b) {
  r   = (c >> 5) * 255 / 7;
  g = ((c >> 2) & 0x07) * 255 / 7;
  b  = (c & 0x03) * 255 / 3;
}

void reverse(unsigned char arr[], int start, int end)
{
  unsigned char temp;
  while (start < end)
  {
    temp = arr[start];
    arr[start] = arr[end];
    arr[end] = temp;
    start++;
    end--;
  }
}

void printArray(unsigned char img[]) {
  for(int i=0;i<sizeof(img);i++){
    Serial.print((int)img[i]);
    Serial.print(" ");
    Serial.println();
  }
}

void correct_image(unsigned char img[]) {
  unsigned char new_img[NUM_LEDS];
  for (int i = 0; i < NUM_LEDS; i++) { // fill data originally
    new_img[i] = img[i];
  }
  for (int i = 0; i < NUM_LEDS; i++) {
    int y_pos = i / 11; // y pos is every 11 leds
    if (y_pos % 2) { // is 1, 3, 5, 7
      unsigned char temp[11];
      for (int j = 0; j < 11; j++) { // fill temp with data
        temp[j] = new_img[i + j];
      }
      reverse(temp, 0, (sizeof(temp) / sizeof(temp[0])) - 1); // reverse temp
      printArray(temp);
      for (int j = 0; j < 11; j++) { // fill new img with new data
        new_img[i + j] = temp[j];
      }
    }
  }
  for (int i = 0; i < NUM_LEDS; i++) { // fill with new data
    img[i] = new_img[i];
  }
}

void draw_img(unsigned char img[]) {
  for (int i = 0; i < NUM_LEDS; i++) {
    int r, g, b;
    bit_to_rgb(img[i], r, g, b);
    leds[i].setRGB(r, g, b);
  }
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600); 
  FastLED.addLeds<WS2812, DATA_PIN, GRB>(leds, NUM_LEDS);
  FastLED.addLeds<WS2812, DATA_PIN_STRING>(led_string, STRING_LEDS);
}

void loop() {
  // put your main code here, to run repeatedly:

  /* for (int dot = 0; dot < NUM_LEDS; dot++) {
    leds[dot] = CRGB::Blue;
    FastLED.show();
    // clear this led for the next time around the loop
    leds[dot] = CRGB::Black;
    delay(30);
    } */
  /*for (int j = 0; j < NUM_LEDS; j++) {
    leds[j] = (smile[j] > 0) ? CRGB::Yellow : CRGB::Black;
    FastLED.show();
    }*/
  correct_image(color);
  draw_img(color);
  led_string[0].setRGB(0, 0, 255);
  FastLED.show();
}
